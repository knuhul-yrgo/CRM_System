package com.yrgo.dataaccess;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.List;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.lang.Nullable;
import org.springframework.stereotype.Repository;

import com.yrgo.domain.Call;
import com.yrgo.domain.Customer;

public class CustomerDaoJdbcTemplateImpl implements CustomerDao {
    private static final String DELETE_SQL = "DELETE FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static final String UPDATE_SQL = "UPDATE CUSTOMER SET COMPANY_NAME=?, EMAIL=?, TELEPHONE=?, NOTES=? WHERE CUSTOMER_ID=?";
    private static final String INSERT_SQL = "INSERT INTO CUSTOMER (COMPANY_NAME, EMAIL, TELEPHONE, NOTES) VALUES (?,?,?,?)";
    private static final String SELECT_BY_ID_SQL = "SELECT * FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static final String SELECT_BY_NAME_SQL = "SELECT * FROM CUSTOMER WHERE COMPANY_NAME LIKE ?";
    private static final String SELECT_ALL_SQL = "SELECT * FROM CUSTOMER";
    private static final String ADD_CALL_SQL = "INSERT INTO TBL_CALL (CUSTOMER_ID, TIME_AND_DATE, NOTES) VALUES (?,?,?)";
    private static final String CREATE_CUSTOMER_TABLE_SQL = "CREATE TABLE CUSTOMER (CUSTOMER_ID VARCHAR(20), COMPANY_NAME VARCHAR(75), EMAIL VARCHAR(75), TELEPHONE CHAR(10), NOTES VARCHAR(255))";
    private static final String CREATE_CALL_TABLE_SQL = "CREATE TABLE TBL_CALL (ID integer generated by default as identity (start with 1), CUSTOMER_ID VARCHAR(20), TIME_AND_DATE DATE, NOTES VARCHAR(255))";
    private static final String SELECT_CALL_BY_CUSTOMER_ID_SQL = "SELECT * FROM TBL_CALL WHERE CUSTOMER_ID LIKE ?";

    private JdbcTemplate template;

    @Autowired
    public CustomerDaoJdbcTemplateImpl(JdbcTemplate template) {
        this.template = template;
    }

    @PostConstruct
    private void createTables() {
        try {
            this.template.update(CREATE_CUSTOMER_TABLE_SQL);
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            System.out.println("Assuming the Customer table exists");
        }
        try {
            this.template.update(CREATE_CALL_TABLE_SQL);
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            System.out.println("Assuming the Call table exists");
        }
    }

    @Override
    public void create(Customer newCustomer) {
        template.update(
                INSERT_SQL,
                newCustomer.getCompanyName(),
                newCustomer.getEmail(),
                newCustomer.getTelephone(),
                newCustomer.getNotes());
    }

    @Override
    public Customer getById(String customerId) throws RecordNotFoundException {
        return template.queryForObject(
                SELECT_BY_ID_SQL,
                new CustomerRowMapper(),
                customerId);

    }

    @Override
    public List<Customer> getByName(String name) {
        return template.query(
                SELECT_BY_NAME_SQL,
                new CustomerRowMapper(),
                "%" + name + "%");
    }

    @Override
    public void update(Customer customerToUpdate) throws RecordNotFoundException {
        template.update(
                UPDATE_SQL,
                customerToUpdate.getCompanyName(),
                customerToUpdate.getEmail(),
                customerToUpdate.getTelephone(),
                customerToUpdate.getNotes(),
                customerToUpdate.getCustomerId());

    }

    @Override
    public void delete(Customer oldCustomer) throws RecordNotFoundException {
        template.update(DELETE_SQL, oldCustomer.getCustomerId());

    }

    @Override
    public List<Customer> getAllCustomers() {
        return template.query(SELECT_ALL_SQL, new CustomerRowMapper());
    }

    @Override
    public Customer getFullCustomerDetail(String customerId) throws RecordNotFoundException {
        Customer customer = template.queryForObject(
                SELECT_BY_ID_SQL,
                new CustomerRowMapper(),
                customerId);

        List<Call> calls = template.query(
                SELECT_CALL_BY_CUSTOMER_ID_SQL,
                new CallRowMapper(),
                "%" + customerId + "%");

        for (Call call : calls) {
            customer.addCall(call);
        }

        return customer;
    }

    @Override
    public void addCall(Call newCall, String customerId) throws RecordNotFoundException {
        template.update(
                ADD_CALL_SQL,
                customerId,
                newCall.getTimeAndDate(),
                newCall.getNotes());
    }
}

class CustomerRowMapper implements RowMapper<Customer> {

    @Override
    @Nullable
    public Customer mapRow(ResultSet rs, int arg1) throws SQLException {
        String customerId = rs.getString(1);
        String companyName = rs.getString(2);
        String email = rs.getString(3);
        String telephone = rs.getString(4);
        String notes = rs.getString(5);

        return new Customer(customerId, companyName, email, telephone, notes);
    }

}

class CallRowMapper implements RowMapper<Call> {

    @Override
    @Nullable
    public Call mapRow(ResultSet rs, int rowNum) throws SQLException {
        Date timeAndDate = rs.getDate(3);
        String notes = rs.getString(4);

        return new Call(notes, timeAndDate);
    }

}
